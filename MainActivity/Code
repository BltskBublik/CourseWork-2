package com.example.hydroponiccalculator

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            HydroponicApp()
        }
    }
}

// Тема Material3 (по желанию можно вынести в отдельный файл)
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HydroponicApp() {
    // Набор растений и стадий
    val plants = listOf("Базилик", "Листовой салат", "Петрушка")
    val stages = listOf("Вегетация", "Цветение", "Плодоношение")

    // Состояние выбора
    var selectedPlant by remember { mutableStateOf(plants.first()) }
    var selectedStage by remember { mutableStateOf(stages.first()) }
    var volumeText by remember { mutableStateOf("1") }

    // Итоговая строка результата
    val resultText = remember(selectedPlant, selectedStage, volumeText) {
        // Пример расчёта: (N, P, K)
        val volume = volumeText.toDoubleOrNull() ?: 1.0
        val (n, p, k) = when(selectedPlant) {
            "Базилик" -> when(selectedStage) {
                "Вегетация" -> Triple(2.0, 1.0, 2.0)
                "Цветение" -> Triple(1.5, 1.2, 2.2)
                "Плодоношение" -> Triple(1.0, 1.5, 2.5)
                else -> Triple(1.0,1.0,1.0)
            }
            "Листовой салат" -> Triple(1.8, 0.8, 1.8)
            "Петрушка" -> Triple(2.0, 0.8, 1.5)
            else -> Triple(1.0, 1.0, 1.0)
        }
        val totalN = n * volume
        val totalP = p * volume
        val totalK = k * volume
        "Азот: %.2f г\nФосфор: %.2f г\nКалий: %.2f г".format(totalN, totalP, totalK)
    }

    Scaffold(
        topBar = {
            TopAppBar(title = { Text("Гидропонный калькулятор") })
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // Выбор растения
            Text("Растение:")
            DropdownMenuBox(
                items = plants,
                selectedItem = selectedPlant,
                onItemSelected = { selectedPlant = it }
            )

            Spacer(Modifier.height(16.dp))

            // Выбор стадии
            Text("Стадия роста:")
            DropdownMenuBox(
                items = stages,
                selectedItem = selectedStage,
                onItemSelected = { selectedStage = it }
            )

            Spacer(Modifier.height(16.dp))

            // Ввод объёма
            Text("Объём раствора (л):")
            TextField(
                value = volumeText,
                onValueChange = { volumeText = it },
                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                singleLine = true
            )

            Spacer(Modifier.height(24.dp))

            // Результат
            Text("Результат:")
            Text(resultText)
        }
    }
}

// Простой DropdownMenu c Material3
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DropdownMenuBox(
    items: List<String>,
    selectedItem: String,
    onItemSelected: (String) -> Unit
) {
    var expanded by remember { mutableStateOf(false) }

    ExposedDropdownMenuBox(
        expanded = expanded,
        onExpandedChange = { expanded = !expanded }
    ) {
        TextField(
            value = selectedItem,
            onValueChange = {},
            readOnly = true,
            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded) },
            colors = ExposedDropdownMenuDefaults.textFieldColors()
        )
        ExposedDropdownMenu(
            expanded = expanded,
            onDismissRequest = { expanded = false }
        ) {
            items.forEach { item ->
                DropdownMenuItem(
                    text = { Text(item) },
                    onClick = {
                        onItemSelected(item)
                        expanded = false
                    }
                )
            }
        }
    }
}
